package com.vampa.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.vampa.model.MemberVO;
import com.vampa.service.MemberService;

@Controller//해당 클래스가 Controller 역할을 한다고 알림
@RequestMapping(value = "/member") //member 밑에 여러 도메인이 존재할 것이므로 클래스 위에 member 도메인을 매핑해줌 즉 /memeber/ 매핑 해줌
public class MemberController {
	private static final Logger logger = LoggerFactory.getLogger(BookController.class); //로그 기록을 남기기 위해 Logger 클래스인 logger변수 선언
	
	@Autowired
	private MemberService memberservice; //MemberService.java가 MemberController.java에 자동 주입이 되도록
	
	/*
	 * 회원가입 페이지 이동
	 */
	@RequestMapping(value = "join", method = RequestMethod.GET)
	public void joinGET() {
		logger.info("회원가입 페이지 진입");
	}
	
	/*
	 * 회원가입 서비스(기능) 수행 - POST요청
	 */
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String joinPOST(MemberVO member) throws Exception {
		logger.info("join 진입");
		
		//회원가입 서비스 실행
		memberservice.memberJoin(member);
		logger.info("join service 성공");
		
		return "redirect:/main"; //메인 페이지로 이동
	}
	
	/*
	 * 아이디 중복성 검사 서비스(기능) 수행 - POST 요청
	 */
	@RequestMapping(value = "/memberIdChk", method = RequestMethod.POST)
	public String memberIdChkPOST(String memberId) throws Exception {
		//logger.info("memberIdChk() 메소드 진입")
		int result = memberservice.idCheck(memberId); //존재하면 0, 존재하지 않으면 1 반환
		logger.info("결과값: "+ result);
		if(result != 0) {
			return "fail"; //중복된 아이디 존재
		}
		else {
			return "success"; //중복된 아이디가 없음
		}
	}
	
	/*
	 * 로그인 페이지 이동
	 */
	@RequestMapping(value= "login", method = RequestMethod.GET)
	public void loginGET() {
		logger.info("로그인 페이지 진입");
	}
	

}
